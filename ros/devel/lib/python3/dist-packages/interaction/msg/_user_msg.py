# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interaction/user_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import interaction.msg

class user_msg(genpy.Message):
  _md5sum = "df5514cbf35b34e84b550eb6858f003d"
  _type = "interaction/user_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """information_msg information
position_msg position
string emotion
================================================================================
MSG: interaction/information_msg
string name
uint32 age
string[] languages
================================================================================
MSG: interaction/position_msg
uint32 x
uint32 y
uint32 z"""
  __slots__ = ['information','position','emotion']
  _slot_types = ['interaction/information_msg','interaction/position_msg','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       information,position,emotion

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(user_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.information is None:
        self.information = interaction.msg.information_msg()
      if self.position is None:
        self.position = interaction.msg.position_msg()
      if self.emotion is None:
        self.emotion = ''
    else:
      self.information = interaction.msg.information_msg()
      self.position = interaction.msg.position_msg()
      self.emotion = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.information.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.information.age
      buff.write(_get_struct_I().pack(_x))
      length = len(self.information.languages)
      buff.write(_struct_I.pack(length))
      for val1 in self.information.languages:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3I().pack(_x.position.x, _x.position.y, _x.position.z))
      _x = self.emotion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.information is None:
        self.information = interaction.msg.information_msg()
      if self.position is None:
        self.position = interaction.msg.position_msg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.information.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.information.name = str[start:end]
      start = end
      end += 4
      (self.information.age,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.information.languages = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.information.languages.append(val1)
      _x = self
      start = end
      end += 12
      (_x.position.x, _x.position.y, _x.position.z,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.emotion = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.information.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.information.age
      buff.write(_get_struct_I().pack(_x))
      length = len(self.information.languages)
      buff.write(_struct_I.pack(length))
      for val1 in self.information.languages:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_3I().pack(_x.position.x, _x.position.y, _x.position.z))
      _x = self.emotion
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.information is None:
        self.information = interaction.msg.information_msg()
      if self.position is None:
        self.position = interaction.msg.position_msg()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.information.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.information.name = str[start:end]
      start = end
      end += 4
      (self.information.age,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.information.languages = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.information.languages.append(val1)
      _x = self
      start = end
      end += 12
      (_x.position.x, _x.position.y, _x.position.z,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.emotion = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.emotion = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
