// Generated by gencpp from file interaction/user_msg.msg
// DO NOT EDIT!


#ifndef INTERACTION_MESSAGE_USER_MSG_H
#define INTERACTION_MESSAGE_USER_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <interaction/information_msg.h>
#include <interaction/position_msg.h>

namespace interaction
{
template <class ContainerAllocator>
struct user_msg_
{
  typedef user_msg_<ContainerAllocator> Type;

  user_msg_()
    : information()
    , position()
    , emotion()  {
    }
  user_msg_(const ContainerAllocator& _alloc)
    : information(_alloc)
    , position(_alloc)
    , emotion(_alloc)  {
  (void)_alloc;
    }



   typedef  ::interaction::information_msg_<ContainerAllocator>  _information_type;
  _information_type information;

   typedef  ::interaction::position_msg_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emotion_type;
  _emotion_type emotion;





  typedef boost::shared_ptr< ::interaction::user_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interaction::user_msg_<ContainerAllocator> const> ConstPtr;

}; // struct user_msg_

typedef ::interaction::user_msg_<std::allocator<void> > user_msg;

typedef boost::shared_ptr< ::interaction::user_msg > user_msgPtr;
typedef boost::shared_ptr< ::interaction::user_msg const> user_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interaction::user_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interaction::user_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interaction::user_msg_<ContainerAllocator1> & lhs, const ::interaction::user_msg_<ContainerAllocator2> & rhs)
{
  return lhs.information == rhs.information &&
    lhs.position == rhs.position &&
    lhs.emotion == rhs.emotion;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interaction::user_msg_<ContainerAllocator1> & lhs, const ::interaction::user_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interaction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interaction::user_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaction::user_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction::user_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction::user_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction::user_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction::user_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interaction::user_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df5514cbf35b34e84b550eb6858f003d";
  }

  static const char* value(const ::interaction::user_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf5514cbf35b34e8ULL;
  static const uint64_t static_value2 = 0x4b550eb6858f003dULL;
};

template<class ContainerAllocator>
struct DataType< ::interaction::user_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interaction/user_msg";
  }

  static const char* value(const ::interaction::user_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interaction::user_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "information_msg information\n"
"position_msg position\n"
"string emotion\n"
"================================================================================\n"
"MSG: interaction/information_msg\n"
"string name\n"
"uint32 age\n"
"string[] languages\n"
"================================================================================\n"
"MSG: interaction/position_msg\n"
"uint32 x\n"
"uint32 y\n"
"uint32 z\n"
;
  }

  static const char* value(const ::interaction::user_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interaction::user_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.information);
      stream.next(m.position);
      stream.next(m.emotion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct user_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interaction::user_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interaction::user_msg_<ContainerAllocator>& v)
  {
    s << indent << "information: ";
    s << std::endl;
    Printer< ::interaction::information_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.information);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::interaction::position_msg_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emotion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACTION_MESSAGE_USER_MSG_H
