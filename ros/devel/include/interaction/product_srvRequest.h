// Generated by gencpp from file interaction/product_srvRequest.msg
// DO NOT EDIT!


#ifndef INTERACTION_MESSAGE_PRODUCT_SRVREQUEST_H
#define INTERACTION_MESSAGE_PRODUCT_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interaction
{
template <class ContainerAllocator>
struct product_srvRequest_
{
  typedef product_srvRequest_<ContainerAllocator> Type;

  product_srvRequest_()
    : age(0)  {
    }
  product_srvRequest_(const ContainerAllocator& _alloc)
    : age(0)  {
  (void)_alloc;
    }



   typedef uint32_t _age_type;
  _age_type age;





  typedef boost::shared_ptr< ::interaction::product_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interaction::product_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct product_srvRequest_

typedef ::interaction::product_srvRequest_<std::allocator<void> > product_srvRequest;

typedef boost::shared_ptr< ::interaction::product_srvRequest > product_srvRequestPtr;
typedef boost::shared_ptr< ::interaction::product_srvRequest const> product_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interaction::product_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interaction::product_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interaction::product_srvRequest_<ContainerAllocator1> & lhs, const ::interaction::product_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.age == rhs.age;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interaction::product_srvRequest_<ContainerAllocator1> & lhs, const ::interaction::product_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interaction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interaction::product_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaction::product_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction::product_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction::product_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction::product_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction::product_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interaction::product_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12c389d47b200f2a820e045041ee4458";
  }

  static const char* value(const ::interaction::product_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12c389d47b200f2aULL;
  static const uint64_t static_value2 = 0x820e045041ee4458ULL;
};

template<class ContainerAllocator>
struct DataType< ::interaction::product_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interaction/product_srvRequest";
  }

  static const char* value(const ::interaction::product_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interaction::product_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 age\n"
;
  }

  static const char* value(const ::interaction::product_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interaction::product_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct product_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interaction::product_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interaction::product_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "age: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACTION_MESSAGE_PRODUCT_SRVREQUEST_H
